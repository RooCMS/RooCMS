const e="roocms-v2",t="roocms-v2-api-v1",a="/offline",n=["/","/themes/default/assets/css/roocms.min.css","/themes/default/assets/js/alpine.csp.min.js","/themes/default/assets/js/app/main.js","/themes/default/assets/js/app/api.js","/themes/default/assets/js/app/auth.js","/themes/default/assets/js/app/config.js",a],s=[/^\/api\/v1\/users\/me$/,/^\/api\/v1\/settings/,/^\/api\/v1\/content/],o=6e4,c=36e5;self.addEventListener("install",(t=>{console.log("[SW] Installing..."),t.waitUntil(caches.open(e).then((e=>(console.log("[SW] Precaching app shell"),e.addAll(n)))).then((()=>(console.log("[SW] Installed successfully"),self.skipWaiting()))).catch((e=>{console.error("[SW] Installation failed:",e)})))})),self.addEventListener("activate",(a=>{console.log("[SW] Activating..."),a.waitUntil(caches.keys().then((a=>Promise.all(a.map((a=>{if(a!==e&&a!==t)return console.log("[SW] Deleting old cache:",a),caches.delete(a)}))))).then((()=>(console.log("[SW] Activated successfully"),self.clients.claim()))))})),self.addEventListener("fetch",(n=>{const{request:i}=n,l=new URL(i.url);l.origin===location.origin&&(l.pathname.startsWith("/api/")?n.respondWith(async function(e){const a=new URL(e.url);console.log("[SW] API caching disabled, proxying request:",a.pathname);try{return await fetch(e)}catch(e){return console.log("[SW] API request failed (no cache):",a.pathname,e),new Response(JSON.stringify({error:"Network Error",message:"API request failed and caching is disabled"}),{status:503,headers:{"Content-Type":"application/json"}})}const n="GET"===e.method,c=s.some((e=>e.test(a.pathname)));if(!n||!c)return async function(e,t){try{const a=await fetch(e);if(t&&a.ok){const n=await caches.open(t);await n.put(e,a.clone())}return a}catch(a){if(t){const a=await caches.open(t),n=await a.match(e);if(n)return n}throw a}}(e,null);try{const n=await caches.open(t),s=await n.match(e);if(s){if(!(o>0))return console.log("[SW] API cache hit (permanent):",a.pathname),s;{const e=s.headers.get("sw-cache-date");if(e&&Date.now()-parseInt(e)<o)return console.log("[SW] API cache hit (fresh):",a.pathname),s;console.log("[SW] API cache expired:",a.pathname)}}const c=await fetch(e);if(c.ok){const t=c.clone();t.headers.set("sw-cache-date",Date.now().toString()),await n.put(e,t),console.log("[SW] API cached:",a.pathname)}return c}catch(n){console.log("[SW] API offline, serving cache:",a.pathname);const s=await caches.open(t);return await s.match(e)||new Response(JSON.stringify({error:"Offline",message:"No cached data available"}),{status:503,headers:{"Content-Type":"application/json"}})}}(i)):"navigate"!==i.mode?n.respondWith(async function(t){0;try{const a=await caches.open(e),n=await a.match(t);if(n){if(!(c>0))return console.log("[SW] Static cache hit (permanent):",t.url),n;{const e=n.headers.get("sw-cache-date");if(e&&Date.now()-parseInt(e)<c)return console.log("[SW] Static cache hit (fresh):",t.url),n;console.log("[SW] Static cache expired:",t.url)}}const s=await fetch(t);if(s.ok){const e=s.clone();e.headers.set("sw-cache-date",Date.now().toString()),await a.put(t,e),console.log("[SW] Static cached:",t.url)}return s}catch(a){console.log("[SW] Static offline:",t.url);return(await caches.open(e)).match(t)||new Response("Resource not available offline",{status:503})}}(i)):n.respondWith(async function(t){try{return await fetch(t)}catch(n){console.log("[SW] Navigation offline, serving cache");const s=await caches.open(e),o=await s.match(t);return o||(s.match(a)||new Response("<h1>Offline</h1><p>You are currently offline</p>",{headers:{"Content-Type":"text/html"}}))}}(i)))})),self.addEventListener("sync",(e=>{console.log("[SW] Background sync:",e.tag),"background-sync"===e.tag&&e.waitUntil(async function(){console.log("[SW] Performing background sync...")}())})),self.addEventListener("push",(e=>{if(console.log("[SW] Push received:",e),e.data){const t=e.data.json();e.waitUntil(self.registration.showNotification(t.title,{body:t.body,icon:"/favicon.ico",badge:"/favicon.ico"}))}})),self.addEventListener("notificationclick",(e=>{console.log("[SW] Notification clicked:",e),e.notification.close(),e.waitUntil(self.clients.openWindow("/"))})),console.log("[SW] Service Worker script loaded");