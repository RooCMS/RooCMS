const e="roocms-v2",t="roocms-v2-api-v1",a="/offline",n=["/","/themes/default/assets/css/roocms.min.css","/themes/default/assets/js/alpine.csp.min.js","/themes/default/assets/js/app/main.js","/themes/default/assets/js/app/api.js","/themes/default/assets/js/app/auth.js","/themes/default/assets/js/app/config.js",a],s=[/^\/api\/v1\/users\/me$/,/^\/api\/v1\/settings/,/^\/api\/v1\/content/],c=6e4,i=36e5;function o(e,t){const a={log:console.log,error:console.error,warn:console.warn,debug:console.debug}[e];a&&a("[SW] "+t)}self.addEventListener("install",(t=>{o("log","Installing..."),t.waitUntil(caches.open(e).then((e=>(o("log","Precaching app shell"),e.addAll(n)))).then((()=>(o("log","Installed successfully"),self.skipWaiting()))).catch((e=>{o("error","Installation failed:")})))})),self.addEventListener("activate",(a=>{o("log","Activating..."),a.waitUntil(caches.keys().then((a=>Promise.all(a.map((a=>{if(a!==e&&a!==t)return o("log","Deleting old cache:"),caches.delete(a)}))))).then((()=>(o("log","Activated successfully"),self.clients.claim()))))})),self.addEventListener("fetch",(n=>{const{request:r}=n,l=new URL(r.url);l.origin===location.origin&&(l.pathname.startsWith("/api/")?n.respondWith(async function(e){const a=new URL(e.url);o("log","API caching disabled, proxying request:",a.pathname);try{return await fetch(e)}catch(e){return o("error","API request failed (no cache):",a.pathname),new Response(JSON.stringify({error:"Network Error",message:"API request failed and caching is disabled"}),{status:503,headers:{"Content-Type":"application/json"}})}const n="GET"===e.method,i=s.some((e=>e.test(a.pathname)));if(!n||!i)return async function(e,t){try{const a=await fetch(e);if(t&&a.ok){const n=await caches.open(t);await n.put(e,a.clone())}return a}catch(a){if(t){const a=await caches.open(t),n=await a.match(e);if(n)return n}throw a}}(e,null);try{const n=await caches.open(t),s=await n.match(e);if(s){if(!(c>0))return o("log","API cache hit (permanent):",a.pathname),s;{const e=s.headers.get("sw-cache-date");if(e&&Date.now()-parseInt(e)<c)return o("log","API cache hit (fresh):",a.pathname),s;o("log","API cache expired:",a.pathname)}}const i=await fetch(e);if(i.ok){const t=i.clone();t.headers.set("sw-cache-date",Date.now().toString()),await n.put(e,t),o("log","API cached:",a.pathname)}return i}catch(n){o("log","API offline, serving cache:",a.pathname);const s=await caches.open(t);return await s.match(e)||new Response(JSON.stringify({error:"Offline",message:"No cached data available"}),{status:503,headers:{"Content-Type":"application/json"}})}}(r)):"navigate"!==r.mode?n.respondWith(async function(t){0;try{const a=await caches.open(e),n=await a.match(t);if(n){if(!(i>0))return o("log","Static cache hit (permanent):",t.url),n;{const e=n.headers.get("sw-cache-date");if(e&&Date.now()-parseInt(e)<i)return o("log","Static cache hit (fresh):",t.url),n;o("log","Static cache expired:",t.url)}}const s=await fetch(t);if(s.ok){const e=s.clone();e.headers.set("sw-cache-date",Date.now().toString()),await a.put(t,e),o("log","Static cached:",t.url)}return s}catch(a){o("log","Static offline:",t.url);return(await caches.open(e)).match(t)||new Response("Resource not available offline",{status:503})}}(r)):n.respondWith(async function(t){try{return await fetch(t)}catch(n){o("log","Navigation offline, serving cache");const s=await caches.open(e),c=await s.match(t);return c||(s.match(a)||new Response("<h1>Offline</h1><p>You are currently offline</p>",{headers:{"Content-Type":"text/html"}}))}}(r)))})),self.addEventListener("sync",(e=>{o("log","Background sync:",e.tag),"background-sync"===e.tag&&e.waitUntil(async function(){o("log","Performing background sync...")}())})),self.addEventListener("push",(e=>{if(o("log","Push received:"),e.data){const t=e.data.json();e.waitUntil(self.registration.showNotification(t.title,{body:t.body,icon:"/favicon.ico",badge:"/favicon.ico"}))}})),self.addEventListener("notificationclick",(e=>{o("log","Notification clicked:"),e.notification.close(),e.waitUntil(self.clients.openWindow("/"))})),o("log","Service Worker script loaded");