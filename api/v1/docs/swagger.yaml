openapi: 3.0.3
info:
  title: RooCMS API
  description: REST API for RooCMS content management system
  version: 2.0.0 alpha
  contact:
    name: RooCMS Team
    email: info@roocms.com
    url: https://www.roocms.com
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: https://dev.roocms.com/api
    description: Development server
paths:
  /:
    get:
      summary: Get API information
      description: Returns basic information about the API and available endpoints
      tags:
        - API Info
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfoResponse'
  /v1/health:
    get:
      summary: Check system health
      description: Returns the health status of the API and system
      tags:
        - Health
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /v1/health/details:
    get:
      summary: Detailed system information
      description: Returns detailed information about the system state
      tags:
        - Health
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthDetailsResponse'
  /v1/csp-report:
    post:
      summary: CSP violation report
      description: Accepts reports of Content Security Policy violations
      tags:
        - Security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CspReportRequest'
      responses:
        '200':
          description: Report accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CspReportResponse'
        '400':
          description: Invalid report format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/login:
    post:
      summary: User authentication
      description: User authentication by login and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account blocked or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /v1/auth/register:
    post:
      summary: User registration
      description: Creating a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Login or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /v1/auth/logout:
    post:
      summary: Logout from system
      description: User session termination
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/logout/all:
    post:
      summary: Logout from all devices
      description: Terminate all user sessions
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout from all devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/refresh:
    post:
      summary: Token refresh
      description: Getting a new access token using a refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/password/recovery:
    post:
      summary: Password recovery request
      description: Sending a password recovery code to email
      tags:
        - Password Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryRequest'
      responses:
        '200':
          description: Password recovery code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordRecoveryResponse'
        '400':
          description: Invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/password/reset:
    post:
      summary: Password reset
      description: Setting a new password using a recovery code
      tags:
        - Password Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid or expired code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Maximum number of attempts exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/password:
    put:
      summary: Password change
      description: Changing the password of an authorized user
      tags:
        - Password Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        '200':
          description: Password successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid current password or authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /v1/users:
    get:
      summary: List users
      description: List users with pagination and filters
      tags:
        - Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Optional offset override
        - in: query
          name: search
          schema:
            type: string
          description: Search by login or email
        - in: query
          name: role
          schema:
            type: string
            enum: [u, m, a, su]
          description: Filter by role
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Filter active users
        - in: query
          name: is_banned
          schema:
            type: boolean
          description: Filter banned users
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
  /v1/users/{user_id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user (admin)
      description: Update user fields and profile
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserUpdateRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      summary: Delete user (admin)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/me:
    get:
      summary: Get current user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update my profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateMeRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    delete:
      summary: Delete my account
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/me/verify-email:
    post:
      summary: Request verification email
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailRequestResponse'
        '400':
          description: Already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/verify-email/{verification_code}:
    get:
      summary: Verify email by code
      tags:
        - Users
      parameters:
        - in: path
          name: verification_code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/create:
    post:
      summary: Create database backup
      description: Create a new database backup with customizable options
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupCreateRequest'
      responses:
        '200':
          description: Backup created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupCreateResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Backup creation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/restore:
    post:
      summary: Restore database from backup
      description: Restore database from an existing backup file
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupRestoreRequest'
      responses:
        '200':
          description: Database restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupRestoreResponse'
        '400':
          description: Invalid request or missing filename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Backup file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Restore operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/list:
    get:
      summary: List available backups
      description: Get list of all available database backups with filtering and sorting
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by filename
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of backups to return
        - in: query
          name: sort
          schema:
            type: string
            enum: [date_asc, date_desc, size_asc, size_desc, name_asc, name_desc]
            default: date_desc
          description: Sort order for results
      responses:
        '200':
          description: List of available backups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupListResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/delete/{filename}:
    delete:
      summary: Delete backup file
      description: Delete a specific backup file from the server
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_.-]+\.(sql|sql\.gz|sql\.bz2)$'
          description: Backup filename to delete
      responses:
        '200':
          description: Backup deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid filename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Backup file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/download/{filename}:
    get:
      summary: Download backup file
      description: Download a backup file to local system
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_.-]+\.(sql|sql\.gz|sql\.bz2)$'
          description: Backup filename to download
      responses:
        '200':
          description: Backup file download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              description: 'attachment; filename="backup.sql.gz"'
            Content-Length:
              schema:
                type: integer
              description: File size in bytes
        '400':
          description: Invalid filename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Backup file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/logs:
    get:
      summary: Get backup operation logs
      description: Get recent backup and restore operation logs for monitoring
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: Maximum number of log entries to return
      responses:
        '200':
          description: Backup operation logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupLogsResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/backup/status:
    get:
      summary: Get backup system status
      description: Get backup system status, statistics and health information
      tags:
        - Database Backups
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Backup system status and statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupStatusResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/settings:
    get:
      summary: Get all settings
      description: Retrieve all system settings grouped by categories
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/settings/group-{group}:
    get:
      summary: Get settings by group
      description: Retrieve all settings for a specific group/category
      tags:
        - Settings
      security:
        - bearerAuth: []
      parameters:
        - name: group
          in: path
          required: true
          description: Settings group name (e.g., site, mailer)
          schema:
            type: string
            example: "site"
      responses:
        '200':
          description: Group settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsGroupResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Settings group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/settings/key-{key}:
    get:
      summary: Get specific setting by key
      description: Retrieve a specific setting by its key with metadata
      tags:
        - Settings
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          description: Setting key name
          schema:
            type: string
            example: "site_name"
      responses:
        '200':
          description: Setting retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update specific setting
      description: Update a specific setting value with validation
      tags:
        - Settings
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          description: Setting key name
          schema:
            type: string
            example: "site_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  description: New value for the setting
                  oneOf:
                    - type: string
                    - type: integer
                    - type: boolean
                  example: "New Site Name"
      responses:
        '200':
          description: Setting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /v1/settings:
    patch:
      summary: Update multiple settings
      description: Update multiple settings at once with validation
      tags:
        - Settings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                description: Setting key-value pairs to update
                oneOf:
                  - type: string
                  - type: integer
                  - type: boolean
              example:
                site_name: "Updated Site"
                site_domain: "updated.com"
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /v1/settings/reset/all:
    get:
      summary: Reset all settings to defaults
      description: Reset all system settings to their default values
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All settings reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/settings/reset/group-{group}:
    get:
      summary: Reset settings group to defaults
      description: Reset all settings in a specific group to their default values
      tags:
        - Settings
      security:
        - bearerAuth: []
      parameters:
        - name: group
          in: path
          required: true
          description: Settings group name (e.g., site, mailer)
          schema:
            type: string
            example: "site"
      responses:
        '200':
          description: Group settings reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Settings group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/settings/reset/key-{key}:
    get:
      summary: Reset specific setting to default
      description: Reset a specific setting to its default value
      tags:
        - Settings
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          description: Setting key name
          schema:
            type: string
            example: "site_name"
      responses:
        '200':
          description: Setting reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication
  schemas:
    ApiInfoResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: RooCMS API
        timestamp:
          type: string
          format: date-time
          example: '2025-01-15 12:00:00'
        version:
          type: string
          example: 1.0.0
        endpoints:
          type: object
          additionalProperties:
            type: string
    HealthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            status:
              type: string
              enum:
                - healthy
                - unhealthy
              example: healthy
            checks:
              type: object
              properties:
                api:
                  type: object
                  properties:
                    status:
                      type: string
                      enum:
                        - ok
                        - error
                    message:
                      type: string
                    response_time:
                      type: number
                database:
                  type: object
                  properties:
                    status:
                      type: string
                      enum:
                        - ok
                        - error
                    message:
                      type: string
            system_info:
              type: object
              properties:
                timestamp:
                  type: string
                  format: date-time
                timezone:
                  type: string
    HealthDetailsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            api check:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                response_time:
                  type: number
            system_info:
              type: object
              properties:
                timestamp:
                  type: string
                timezone:
                  type: string
                memory_usage:
                  type: object
                  properties:
                    current:
                      type: integer
                    peak:
                      type: integer
                    limit:
                      type: string
            php_info:
              type: object
              properties:
                configuration:
                  type: object
                  additionalProperties:
                    type: string
            roocms_info:
              type: object
              properties:
                version:
                  type: string
                major_version:
                  type: string
                minor_version:
                  type: string
                release_version:
                  type: string
                build:
                  type: string
    CspReportRequest:
      type: object
      required:
        - csp-report
      properties:
        csp-report:
          type: object
          description: CSP violation report
    CspReportResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            status:
              type: string
              example: reported
    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          minLength: 5
          example: user123
        password:
          type: string
          minLength: 8
          example: password123
    RegisterRequest:
      type: object
      required:
        - login
        - email
        - password
      properties:
        login:
          type: string
          minLength: 5
          maxLength: 30
          example: newuser
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: password123
        password_confirmation:
          type: string
          example: password123
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            access_token:
              type: string
              example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
            refresh_token:
              type: string
              example: def50200...
            token_type:
              type: string
              example: Bearer
            expires_in:
              type: integer
              example: 3600
            user:
              $ref: '#/components/schemas/User'
    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: def50200...
    RefreshTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Token refreshed successfully
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            token_type:
              type: string
              example: Bearer
            expires_in:
              type: integer
              example: 3600
    PasswordRecoveryRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: user@example.com
    PasswordRecoveryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Recovery code sent to your email
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            recovery_code:
              type: string
              description: Recovery code (only in debug mode)
              example: '123456'
    PasswordResetRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          description: Password recovery code
          example: '123456'
        password:
          type: string
          minLength: 8
          example: newpassword123
        password_confirmation:
          type: string
          example: newpassword123
    PasswordUpdateRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          example: oldpassword123
        new_password:
          type: string
          minLength: 8
          example: newpassword123
        new_password_confirmation:
          type: string
          example: newpassword123
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        role:
          type: string
          enum:
            - u
            - m
            - a
            - su
          example: u
          description: u - user, m - moderator, a - administrator, su - super user
        login:
          type: string
          example: user123
        email:
          type: string
          format: email
          example: user@example.com
        is_verified:
          type: boolean
          example: false
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: Error message
        status_code:
          type: integer
          example: 400
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          description: Additional error details
    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: Validation failed
        status_code:
          type: integer
          example: 422
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          properties:
            validation_errors:
              type: object
              additionalProperties:
                type: string
              example:
                email: Invalid email format
                password: Password must be at least 6 characters
    UsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/User'
            meta:
              $ref: '#/components/schemas/PaginationMeta'
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false
    UserUpdateMeRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        nickname:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
          enum: [male, female, other]
        avatar:
          type: string
          description: URL to avatar image
        bio:
          type: string
        birthday:
          type: string
          format: date
          example: '1990-01-01'
        website:
          type: string
          format: uri
        is_public:
          type: boolean
    AdminUserUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/UserUpdateMeRequest'
        - type: object
          properties:
            is_active:
              type: boolean
            is_verified:
              type: boolean
            is_banned:
              type: boolean
            ban_expired:
              type: integer
              description: Unix timestamp until which user is banned
            ban_reason:
              type: string
    VerifyEmailRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Verification email sent
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            verification_code:
              type: string
              description: Present only in debug mode
    BackupCreateRequest:
      type: object
      properties:
        compress:
          type: boolean
          default: true
          description: Compress backup file using gzip
        include_data:
          type: boolean
          default: true
          description: Include table data in backup
        include_structure:
          type: boolean
          default: true
          description: Include table structure in backup
        exclude_tables:
          type: array
          items:
            type: string
          default: []
          description: List of table names to exclude from backup
        filename:
          type: string
          description: Custom backup filename (without extension)
          example: "my_backup"
        universal_format:
          type: boolean
          default: true
          description: Create backup in universal format for cross-database compatibility
    BackupCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Database backup created successfully"
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            filename:
              type: string
              example: "backup_2025-01-15_12-00-00.sql.gz"
            filepath:
              type: string
              example: "/var/backups/backup_2025-01-15_12-00-00.sql.gz"
            size:
              type: integer
              example: 1048576
              description: File size in bytes
            size_human:
              type: string
              example: "1.00 MB"
              description: Human-readable file size
            execution_time:
              type: number
              example: 2.456
              description: Backup creation time in seconds
            compressed:
              type: boolean
              example: true
              description: Whether the backup file is compressed
    BackupRestoreRequest:
      type: object
      required:
        - filename
      properties:
        filename:
          type: string
          example: "backup_2025-01-15_12-00-00.sql.gz"
          description: Name of the backup file to restore
        drop_existing:
          type: boolean
          default: false
          description: Drop existing tables before restore
        ignore_errors:
          type: boolean
          default: false
          description: Continue restore process even if some statements fail
        batch_size:
          type: integer
          default: 1000
          minimum: 1
          maximum: 10000
          description: Number of statements to process in one batch
    BackupRestoreResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Database restored successfully"
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            filename:
              type: string
              example: "backup_2025-01-15_12-00-00.sql.gz"
            statements_executed:
              type: integer
              example: 1250
              description: Number of SQL statements successfully executed
            execution_time:
              type: number
              example: 4.789
              description: Restore execution time in seconds
            errors:
              type: array
              items:
                type: string
              description: List of errors encountered during restore (if ignore_errors was true)
    BackupListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Backup files retrieved successfully"
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            backups:
              type: array
              items:
                $ref: '#/components/schemas/BackupFileInfo'
            total_count:
              type: integer
              example: 5
              description: Total number of backup files
            total_size:
              type: integer
              example: 52428800
              description: Total size of all backups in bytes
            total_size_human:
              type: string
              example: "50.00 MB"
              description: Human-readable total size
    BackupFileInfo:
      type: object
      properties:
        filename:
          type: string
          example: "backup_2025-01-15_12-00-00.sql.gz"
        filepath:
          type: string
          example: "/var/backups/backup_2025-01-15_12-00-00.sql.gz"
        size:
          type: integer
          example: 1048576
          description: File size in bytes
        size_human:
          type: string
          example: "1.00 MB"
        created:
          type: string
          format: date-time
          example: "2025-01-15 12:00:00"
          description: File creation timestamp
        compressed:
          type: boolean
          example: true
          description: Whether the file is compressed
    BackupLogsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Backup logs retrieved successfully"
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            logs:
              type: array
              items:
                $ref: '#/components/schemas/BackupLogEntry'
            total_count:
              type: integer
              example: 25
    BackupLogEntry:
      type: object
      properties:
        operation:
          type: string
          enum: [backup_start, backup_complete, backup_error, restore_start, restore_complete, restore_error, backup_deleted]
          example: "backup_complete"
        filename:
          type: string
          example: "backup_2025-01-15_12-00-00.sql.gz"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15 12:05:30"
        data:
          type: object
          description: Additional operation-specific data
          additionalProperties: true
    BackupStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Backup system status retrieved successfully"
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          properties:
            system_status:
              type: string
              enum: [healthy, warning, error]
              example: "healthy"
            backup_directory:
              type: object
              properties:
                path:
                  type: string
                  example: "/var/backups"
                exists:
                  type: boolean
                  example: true
                writable:
                  type: boolean
                  example: true
                free_space:
                  type: integer
                  example: 1073741824
                  description: Available free space in bytes
                free_space_human:
                  type: string
                  example: "1.00 GB"
            database_info:
              type: object
              properties:
                driver:
                  type: string
                  example: "mysql"
                version:
                  type: string
                  example: "8.0.35"
                connection_status:
                  type: string
                  enum: [connected, disconnected, error]
                  example: "connected"
            backup_statistics:
              type: object
              properties:
                total_backups:
                  type: integer
                  example: 15
                total_size:
                  type: integer
                  example: 157286400
                  description: Total size of all backups in bytes
                total_size_human:
                  type: string
                  example: "150.00 MB"
                oldest_backup:
                  type: string
                  format: date-time
                  example: "2025-01-01 10:30:00"
                newest_backup:
                  type: string
                  format: date-time
                  example: "2025-01-15 12:00:00"
                last_operation:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [backup, restore, delete]
                      example: "backup"
                    status:
                      type: string
                      enum: [success, error]
                      example: "success"
                    timestamp:
                      type: string
                      format: date-time
                      example: "2025-01-15 12:05:30"
                    filename:
                      type: string
                      example: "backup_2025-01-15_12-00-00.sql.gz"
    SettingsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15 12:00:00"
        data:
          type: object
          additionalProperties:
            type: object
            additionalProperties: true
          example:
            site:
              site_name: "RooCMS 2.0"
              site_domain: "dev.roocms.com"
            mailer:
              mailer_driver: "mail"
              mailer_host: "localhost"
    SettingsGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15 12:00:00"
        data:
          type: object
          additionalProperties: true
          example:
            site_name: "RooCMS 2.0"
            site_domain: "dev.roocms.com"
    SettingResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15 12:00:00"
        data:
          type: object
          properties:
            key:
              type: string
              example: "site_name"
            value:
              oneOf:
                - type: string
                - type: integer
                - type: boolean
              example: "RooCMS 2.0"
            meta:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
                category:
                  type: string
                  example: "site"
                sort_order:
                  type: integer
                  example: 2
                title:
                  type: string
                  example: "Site name"
                description:
                  type: string
                  nullable: true
                  example: null
                type:
                  type: string
                  enum: [string, integer, boolean, email, date, select, image, file]
                  example: "string"
                options:
                  type: object
                  nullable: true
                  additionalProperties: true
                max_length:
                  type: integer
                  nullable: true
                  example: 255
                is_required:
                  type: integer
                  enum: [0, 1]
                  example: 1
                is_serialized:
                  type: integer
                  enum: [0, 1]
                  example: 0
                created_at:
                  type: integer
                  example: 0
                updated_at:
                  type: integer
                  example: 1758842798
    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: "Validation failed"
        status_code:
          type: integer
          example: 422
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15 12:00:00"
        details:
          type: object
          properties:
            validation_errors:
              type: object
              additionalProperties:
                type: string
              example:
                site_name: "Value exceeds maximum length of 255 characters"
                mailer_from: "Value must be a valid email address"
tags:
  - name: API Info
    description: API information
  - name: Health
    description: System health check
  - name: Security
    description: Security and reports
  - name: Authentication
    description: Authentication and authorization
  - name: Password Management
    description: Password management
  - name: Users
    description: Users and profiles
  - name: Database Backups
    description: Database backup and restore operations
  - name: Settings
    description: System settings management
