{
  "info": {
    "name": "RooCMS API",
    "description": "REST API for RooCMS content management system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "roocms-api-collection",
    "version": {
      "major": 2,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://dev.roocms.com/api",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "verification_code",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "API Info",
      "item": [
        {
          "name": "Get API Information",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Returns basic information about the API and available endpoints"
          },
          "response": []
        }
      ],
      "description": "API information endpoints"
    },
    {
      "name": "Health",
      "item": [
        {
          "name": "Check System Health",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/health",
              "host": ["{{base_url}}"],
              "path": ["v1", "health"]
            },
            "description": "Returns the health status of the API and system"
          },
          "response": []
        },
        {
          "name": "Get Detailed System Information",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/health/details",
              "host": ["{{base_url}}"],
              "path": ["v1", "health", "details"]
            },
            "description": "Returns detailed information about the system state"
          },
          "response": []
        }
      ],
      "description": "System health check endpoints"
    },
    {
      "name": "Security",
      "item": [
        {
          "name": "CSP Violation Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"csp-report\": {\n    \"document-uri\": \"https://example.com/page\",\n    \"referrer\": \"https://example.com/\",\n    \"violated-directive\": \"script-src\",\n    \"effective-directive\": \"script-src\",\n    \"original-policy\": \"default-src 'self'; script-src 'self'\",\n    \"blocked-uri\": \"https://malicious.com/script.js\",\n    \"status-code\": 200\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/csp-report",
              "host": ["{{base_url}}"],
              "path": ["v1", "csp-report"]
            },
            "description": "Accepts reports of Content Security Policy violations"
          },
          "response": []
        }
      ],
      "description": "Security and reports endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', responseJson.data.access_token);",
                  "        pm.collectionVariables.set('refresh_token', responseJson.data.refresh_token);",
                  "        if (responseJson.data.user && responseJson.data.user.user_id) {",
                  "            pm.collectionVariables.set('user_id', responseJson.data.user.user_id);",
                  "        }",
                  "        console.log('Tokens saved to collection variables');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"user123\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "login"]
            },
            "description": "User authentication by login and password"
          },
          "response": []
        },
        {
          "name": "User Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', responseJson.data.access_token);",
                  "        pm.collectionVariables.set('refresh_token', responseJson.data.refresh_token);",
                  "        if (responseJson.data.user && responseJson.data.user.user_id) {",
                  "            pm.collectionVariables.set('user_id', responseJson.data.user.user_id);",
                  "        }",
                  "        console.log('Tokens saved to collection variables');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"newuser\",\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"password_confirmation\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/register",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "register"]
            },
            "description": "Creating a new user account"
          },
          "response": []
        },
        {
          "name": "User Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('access_token', '');",
                  "    pm.collectionVariables.set('refresh_token', '');",
                  "    pm.collectionVariables.set('user_id', '');",
                  "    console.log('Tokens cleared from collection variables');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "logout"]
            },
            "description": "User session termination"
          },
          "response": []
        },
        {
          "name": "User Logout All Devices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('access_token', '');",
                  "    pm.collectionVariables.set('refresh_token', '');",
                  "    pm.collectionVariables.set('user_id', '');",
                  "    console.log('All sessions terminated; tokens cleared');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/auth/logout/all",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "logout", "all"]
            },
            "description": "Terminate all user sessions across devices"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', responseJson.data.access_token);",
                  "        pm.collectionVariables.set('refresh_token', responseJson.data.refresh_token);",
                  "        console.log('Tokens refreshed and saved to collection variables');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "refresh"]
            },
            "description": "Getting a new access token using a refresh token"
          },
          "response": []
        }
      ],
      "description": "Authentication and authorization endpoints"
    },
    {
      "name": "Password Management",
      "item": [
        {
          "name": "Password Recovery Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.recovery_code) {",
                  "        pm.collectionVariables.set('recovery_code', responseJson.data.recovery_code);",
                  "        console.log('Recovery code saved: ' + responseJson.data.recovery_code);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/password/recovery",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "password", "recovery"]
            },
            "description": "Sending a password recovery code to email"
          },
          "response": []
        },
        {
          "name": "Password Reset",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{recovery_code}}\",\n  \"password\": \"newpassword123\",\n  \"password_confirmation\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/password/reset",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "password", "reset"]
            },
            "description": "Setting a new password using a recovery code"
          },
          "response": []
        },
        {
          "name": "Password Change",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"oldpassword123\",\n  \"new_password\": \"newpassword123\",\n  \"new_password_confirmation\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/password",
              "host": ["{{base_url}}"],
              "path": ["v1", "auth", "password"]
            },
            "description": "Changing the password of an authorized user"
          },
          "response": []
        }
      ],
      "description": "Password management endpoints"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users",
              "host": ["{{base_url}}"],
              "path": ["v1", "users"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" },
                { "key": "search", "value": "" },
                { "key": "role", "value": "" },
                { "key": "is_active", "value": "" },
                { "key": "is_banned", "value": "" }
              ]
            },
            "description": "List users with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "{{user_id}}"]
            },
            "description": "Get user by ID"
          },
          "response": []
        },
        {
          "name": "Get Me",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/me",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "me"]
            },
            "description": "Get current authenticated user"
          },
          "response": []
        },
        {
          "name": "Update Me",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"nickname\": \"nick\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"gender\": \"other\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"bio\": \"About me\",\n  \"birthday\": \"1990-01-01\",\n  \"website\": \"https://example.com\",\n  \"is_public\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/users/me",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "me"]
            },
            "description": "Update current user's profile and email"
          },
          "response": []
        },
        {
          "name": "Delete Me",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/me",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "me"]
            },
            "description": "Delete current user account"
          },
          "response": []
        },
        {
          "name": "Request Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/me/verify-email",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "me", "verify-email"]
            },
            "description": "Send verification email for current user"
          },
          "response": []
        },
        {
          "name": "Verify Email with Code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/verify-email/{{verification_code}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "verify-email", "{{verification_code}}"]
            },
            "description": "Verify email by code"
          },
          "response": []
        },
        {
          "name": "Admin Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"is_active\": true,\n  \"is_verified\": true,\n  \"is_banned\": false,\n  \"ban_expired\": 0,\n  \"ban_reason\": \"\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "{{user_id}}"]
            },
            "description": "Update user by admin"
          },
          "response": []
        },
        {
          "name": "Admin Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "users", "{{user_id}}"]
            },
            "description": "Delete user by admin"
          },
          "response": []
        }
      ],
      "description": "Users and profiles endpoints"
    },
    {
      "name": "Database Backups",
      "item": [
        {
          "name": "Create Database Backup",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"compress\": true,\n  \"include_data\": true,\n  \"include_structure\": true,\n  \"exclude_tables\": [],\n  \"filename\": \"my_backup\",\n  \"universal_format\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/backup/create",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "create"]
            },
            "description": "Create a new database backup with customizable options"
          },
          "response": []
        },
        {
          "name": "Restore Database from Backup",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"backup_2025-01-15_12-00-00.sql.gz\",\n  \"drop_existing\": false,\n  \"ignore_errors\": false,\n  \"batch_size\": 1000\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/backup/restore",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "restore"]
            },
            "description": "Restore database from an existing backup file"
          },
          "response": []
        },
        {
          "name": "List Available Backups",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/backup/list",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "list"],
              "query": [
                { "key": "search", "value": "", "disabled": true },
                { "key": "limit", "value": "10", "disabled": true },
                { "key": "sort", "value": "date_desc", "disabled": true }
              ]
            },
            "description": "Get list of all available database backups"
          },
          "response": []
        },
        {
          "name": "Delete Backup File",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/backup/delete/backup_2025-01-15_12-00-00.sql.gz",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "delete", "backup_2025-01-15_12-00-00.sql.gz"]
            },
            "description": "Delete a specific backup file"
          },
          "response": []
        },
        {
          "name": "Download Backup File",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/backup/download/backup_2025-01-15_12-00-00.sql.gz",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "download", "backup_2025-01-15_12-00-00.sql.gz"]
            },
            "description": "Download a backup file to local system"
          },
          "response": []
        },
        {
          "name": "Get Backup Operation Logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/backup/logs",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "logs"],
              "query": [
                { "key": "limit", "value": "100" }
              ]
            },
            "description": "Get recent backup and restore operation logs"
          },
          "response": []
        },
        {
          "name": "Get Backup System Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/backup/status",
              "host": ["{{base_url}}"],
              "path": ["v1", "backup", "status"]
            },
            "description": "Get backup system status, statistics and health information"
          },
          "response": []
        }
      ],
      "description": "Database backup and restore management endpoints"
    },
    {
      "name": "Admin Settings",
      "item": [
        {
          "name": "Get All Settings",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings"]
            },
            "description": "Retrieve all system settings grouped by categories"
          },
          "response": []
        },
        {
          "name": "Get Settings Group",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/group-site",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "group-site"]
            },
            "description": "Retrieve all settings for a specific group (e.g., site, mailer)"
          },
          "response": []
        },
        {
          "name": "Get Specific Setting",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/key-site_name",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "key-site_name"]
            },
            "description": "Retrieve a specific setting by its key with metadata"
          },
          "response": []
        },
        {
          "name": "Update Specific Setting",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": \"New Site Name\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/key-site_name",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "key-site_name"]
            },
            "description": "Update a specific setting value with validation"
          },
          "response": []
        },
        {
          "name": "Update Multiple Settings",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"site_name\": \"Updated Site\",\n  \"site_domain\": \"updated.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/admin/settings",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings"]
            },
            "description": "Update multiple settings at once with validation"
          },
          "response": []
        },
        {
          "name": "Reset All Settings",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/reset/all",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "reset", "all"]
            },
            "description": "Reset all system settings to their default values"
          },
          "response": []
        },
        {
          "name": "Reset Settings Group",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/reset/group-site",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "reset", "group-site"]
            },
            "description": "Reset all settings in a specific group to their default values"
          },
          "response": []
        },
        {
          "name": "Reset Specific Setting",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/admin/settings/reset/key-site_name",
              "host": ["{{base_url}}"],
              "path": ["v1", "admin", "settings", "reset", "key-site_name"]
            },
            "description": "Reset a specific setting to its default value"
          },
          "response": []
        }
      ],
      "description": "System settings management endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const accessToken = pm.collectionVariables.get('access_token');",
          "const refreshToken = pm.collectionVariables.get('refresh_token');",
          "",
          "if (!accessToken && refreshToken && pm.request.url.path.join('/') !== 'v1/auth/refresh') {",
          "    console.log('Access token missing, attempting to refresh...');",
          "    ",
          "    const refreshRequest = {",
          "        url: pm.collectionVariables.get('base_url') + '/v1/auth/refresh',",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                refresh_token: refreshToken",
          "            })",
          "        }",
          "    };",
          "    ",
          "    pm.sendRequest(refreshRequest, (err, response) => {",
          "        if (err) {",
          "            console.log('Token refresh failed:', err);",
          "        } else if (response.code === 200) {",
          "            const responseJson = response.json();",
          "            if (responseJson.data && responseJson.data.access_token) {",
          "                pm.collectionVariables.set('access_token', responseJson.data.access_token);",
          "                pm.collectionVariables.set('refresh_token', responseJson.data.refresh_token);",
          "                console.log('Token refreshed successfully');",
          "            }",
          "        } else {",
          "            console.log('Token refresh failed with status:', response.code);",
          "        }",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for all requests",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct Content-Type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Handle token expiration",
          "if (pm.response.code === 401) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.message && responseJson.message.includes('expired')) {",
          "        console.log('Token expired, clearing stored tokens');",
          "        pm.collectionVariables.set('access_token', '');",
          "    }",
          "}"
        ]
      }
    }
  ]
}
